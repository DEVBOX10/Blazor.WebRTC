@page "/"
@inject IJSRuntime jsRuntime

<h1>Hello, world!</h1>

Welcome to your new app.

<SurveyPrompt Title="How is Blazor working for you?" />

@code {
    [Inject]
    RTCPeerConnection client { get; set; }
    List<RTCIceCandidate> clientCandidates = new List<RTCIceCandidate>();
    RTCDataChannel dcClient;
    [Inject]
    RTCPeerConnection server { get; set; }
    RTCDataChannel dcServer;
    List<RTCIceCandidate> serverCandidates = new List<RTCIceCandidate>();
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            client.onicecandidate += async (obj, ice) =>
            {
                if (string.IsNullOrEmpty(server.SignalingState))
                {
                    serverCandidates.Add(ice);
                    return;
                }
                server.addIceCandidate(ice);
            };
            server.ondatachannel += async (obj, dc) =>
            {
                dcServer = dc;
                dc.OnDataMessage += (s, ex) =>
                {
                    Console.WriteLine("Received a message from client");
                };
            };
            server.onicecandidate += (obj, ice) =>
            {
                if (string.IsNullOrEmpty(client.SignalingState))
                {
                    clientCandidates.Add(ice);
                    return;
                }
                client.addIceCandidate(ice);
            };

            dcClient = await client.createDataChannel("default");
            var offer = await client.createOffer();
            await client.setLocalDescription(offer);

            await server.setRemoteDescription(offer);
            await Task.Delay(500);
            var answer = await server.createAnswer();
            await server.setLocalDescription(answer);

            await client.setRemoteDescription(answer);

            foreach (var ice in serverCandidates)
            {
                server.addIceCandidate(ice);
            }

            foreach (var ice in clientCandidates)
            {
                client.addIceCandidate(ice);
            }

            RTCDataChannel dc = null;
            while (true)
            {
                dc = client.DataChannels.Where(n => n.Label == "default").FirstOrDefault();
                if (dc.ReadyState == "open")
                {
                    break;
                }
                await Task.Delay(100);
            }

            byte[] data = new byte[256];
            for (byte i = 0; i < 50; i++)
                data[i] = i;

            dc.Send(data);
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}